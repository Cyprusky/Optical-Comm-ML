% data_parser - function to parse together RX data and labels
%
% arguments:
%   file_RX - path to csv file
%                   first 7 rows will be ignored
%                   column 1: time (ns)
%                   column 2: electrical signal (a.u.)
%   file_labels - path to csv file (generated by autolabeler.m)
%                   column 1: labels (0 or 1 for Binary, 0-3 for PAM4)
%   train_length - number of samples to use for training
%   shuffle - boolean to toggle randomize option
%
% returns:
%   training_set - array of labeled feature vectors
%   test_set - array of labeled feature vectors
%                   column 1: time (ns)
%                   column 2: electrical signal (a.u.)
%                   column 3: labels (0 or 1 for Binary, 0-3 for PAM4)

function [training_set, test_set]=data_parser(file_RX, file_labels, train_length, shuffle)
    fid = fopen(file_RX);
    header = 7;             % hardcoded header
    data = textscan(fid, '%f %f', 'Delimiter', ',', 'HeaderLines', header);
    fclose(fid);
    data = cell2mat(data);

    fid = fopen(file_labels);
    labels = textscan(fid, '%f', 'Delimiter', ',');
    fclose(fid);
    labels = cell2mat(labels);

    bit_length = 0.04;      % hardcoded time length of one bit (ns)
    T = data(2,1);          % sampling interval (ns)
    bit_samples = bit_length/T; % number of samples in one bit
    
    if not(length(data)/bit_samples == length(labels))
        error('amount of data does not match number of labels');
    end
    if train_length <= 0
        error('need at least one training point');
    elseif train_length >= length(data)
        error('need at least one test point');
    end
        
    set = zeros(length(data), 3);
    for n=1:length(data)
        set(n,1) = mod(data(n,1), bit_length); %time wrt clock cycle (ns)
        set(n,2) = data(n,2); %electrical signal value
        set(n,3) = labels(floor(data(n,1)/bit_length) + 1); %label
    end
    
    temp_set = zeros(length(data), 3);
    if shuffle
        order=randperm(length(data)/bit_samples);
        for i=1:length(data)/bit_samples
            n=order(i);
            x = set(bit_samples*(n-1)+1:bit_samples*n,:);
            temp_set(bit_samples*(i-1)+1:bit_samples*i,:) = x;
        end
    end
    
    training_set = set(1:train_length,:);
    test_set = set(train_length+1:end,:);
end